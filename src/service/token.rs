use papaya::HashMap;
use rand::{RngCore, rng};
use std::{ops::Add, sync::Arc};
use time::{Duration, OffsetDateTime};
use tokio::spawn;
use tracing::{info, trace};

pub struct TokenService {
    tokens: HashMap<[u8; 32], OffsetDateTime>,
}

impl TokenService {
    pub fn new() -> Self {
        Self {
            tokens: HashMap::new(),
        }
    }
    pub async fn generate_token(&self) -> [u8; 32] {
        const SESSION_TTL: Duration = Duration::days(1);

        let mut bytes = [0u8; 32];
        rng().fill_bytes(&mut bytes);
        let now = OffsetDateTime::now_utc().add(SESSION_TTL);
        self.tokens.pin_owned().insert(bytes, now);
        trace!("generated token generated bytes: {:?}", bytes);
        bytes
    }

    pub fn validate(&self, token: &[u8]) -> bool {
        trace!("validating token: {:?}", token);
        let guard = self.tokens.pin_owned();
        let Some(value) = guard.get(token) else {
            return false;
        };
        OffsetDateTime::now_utc() < *value
    }

    pub async fn start_evict_expired_token(self: Arc<Self>) {
        const INTERVAL: std::time::Duration = std::time::Duration::from_secs(10);
        spawn(async move {
            let mut interval = tokio::time::interval(INTERVAL);
            info!("start evict expired token service: interval={INTERVAL:?}");
            loop {
                interval.tick().await;
                let guard = self.tokens.pin_owned();
                let expired = guard
                    .iter()
                    .filter(|(k, _)| !self.validate(*k))
                    .map(|(k, _)| k)
                    .collect::<Vec<&[u8; 32]>>();
                trace!("exec evicting. expired count: {:?}", expired.len());
                for key in expired {
                    guard.remove(key);
                }
            }
        });
    }
}
